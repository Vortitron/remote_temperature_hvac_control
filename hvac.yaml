id: sync_sam_with_sensors
alias: "Sync Sam HVAC with Desired Temperature and Energy Saving"
description: "Control Sam HVAC with remote sensor, desired temp, and dynamic fan-only"
variables:
  # Temperature thresholds
  cool_indoor_threshold: 26  # Remote indoor temp to trigger cool mode (°C)
  cool_outdoor_threshold: 25  # Outdoor temp for cooling (°C)
  cool_indoor_min: 20  # Min remote indoor temp for outdoor-triggered cooling (°C)
  # Offsets
  heat_offset: 1  # Target = internal + heat_offset when heating (°C)
  cool_offset: -1  # Target = internal + cool_offset when cooling (°C)
  base_stop_heat_offset: -2  # Base offset when stopping heat (°C)
  max_stop_heat_offset: -5  # Maximum stop heat offset to avoid extreme targets (°C)
  # Tolerances and thresholds
  temp_tolerance: 0.5  # Tolerance around desired temp to hold steady (°C)
  fan_only_diff: 3  # Difference (remote - desired) to trigger fan-only in heat mode (°C)
trigger:
  - platform: state
    entity_id:
      - sensor.t_h_sensor_temperature  # Remote indoor sensor
      - sensor.sam_outside_temperature  # Outdoor sensor
      - sensor.sam_inside_temperature  # Internal sensor
      - input_number.sam_desired_temperature  # Desired temp
    for:
      seconds: 30  # Debounce
action:
  - choose:
      # Cool Mode: Indoor > cool_indoor_threshold or (outdoor ≥ cool_outdoor_threshold and indoor > cool_indoor_min)
      - conditions:
          - condition: template
            value_template: >
              {% set remote_indoor = states('sensor.t_h_sensor_temperature') | float %}
              {% set outdoor = states('sensor.sam_outside_temperature') | float %}
              {{ remote_indoor > cool_indoor_threshold or (outdoor >= cool_outdoor_threshold and remote_indoor > cool_indoor_min) }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: climate.sam
            data:
              hvac_mode: >
                {% set remote = states('sensor.t_h_sensor_temperature') | float %}
                {% set desired = states('input_number.sam_desired_temperature') | float %}
                {% set outdoor = states('sensor.sam_outside_temperature') | float %}
                {{ 'fan_only' if remote > desired + temp_tolerance and outdoor < desired else 'cool' }}
          - service: climate.set_temperature
            target:
              entity_id: climate.sam
            data:
              temperature: >
                {% set remote = states('sensor.t_h_sensor_temperature') | float %}
                {% set desired = states('input_number.sam_desired_temperature') | float %}
                {% set internal = states('sensor.sam_inside_temperature') | float %}
                {{ internal + cool_offset if remote > desired + temp_tolerance else internal }}
              hvac_mode: >
                {% set remote = states('sensor.t_h_sensor_temperature') | float %}
                {% set desired = states('input_number.sam_desired_temperature') | float %}
                {% set outdoor = states('sensor.sam_outside_temperature') | float %}
                {{ 'fan_only' if remote > desired + temp_tolerance and outdoor < desired else 'cool' }}
          - service: logbook.log
            data:
              name: "Sam HVAC"
              message: >
                {% set remote = states('sensor.t_h_sensor_temperature') | float %}
                {% set desired = states('input_number.sam_desired_temperature') | float %}
                {% set outdoor = states('sensor.sam_outside_temperature') | float %}
                {% set internal = states('sensor.sam_inside_temperature') | float %}
                {% set mode = 'fan_only' if remote > desired + temp_tolerance and outdoor < desired else 'cool' %}
                {% set target = internal + cool_offset if remote > desired + temp_tolerance else internal %}
                Set to {{ mode }}, target {{ target | round(1) }}°C:
                {% if mode == 'fan_only' %}
                  remote {{ remote | round(1) }}°C too warm and outdoor {{ outdoor | round(1) }}°C < desired {{ desired | round(1) }}°C
                {% else %}
                  remote {{ remote | round(1) }}°C too warm for cooling, internal {{ internal | round(1) }}°C
                {% endif %}
          - service: input_text.set_value
            target:
              entity_id: input_text.sam_hvac_status
            data:
              value: >
                {% set remote = states('sensor.t_h_sensor_temperature') | float %}
                {% set desired = states('input_number.sam_desired_temperature') | float %}
                {% set outdoor = states('sensor.sam_outside_temperature') | float %}
                {% set internal = states('sensor.sam_inside_temperature') | float %}
                {% set mode = 'fan_only' if remote > desired + temp_tolerance and outdoor < desired else 'cool' %}
                {% set target = internal + cool_offset if remote > desired + temp_tolerance else internal %}
                Set to {{ mode }}, target {{ target | round(1) }}°C:
                {% if mode == 'fan_only' %}
                  remote {{ remote | round(1) }}°C too warm and outdoor {{ outdoor | round(1) }}°C < desired {{ desired | round(1) }}°C
                {% else %}
                  remote {{ remote | round(1) }}°C too warm for cooling, internal {{ internal | round(1) }}°C
                {% endif %}
      # Heat Mode: Default when not cooling
      - conditions:
          - condition: template
            value_template: >
              {% set remote_indoor = states('sensor.t_h_sensor_temperature') | float %}
              {% set outdoor = states('sensor.sam_outside_temperature') | float %}
              {{ not (remote_indoor > cool_indoor_threshold or (outdoor >= cool_outdoor_threshold and remote_indoor > cool_indoor_min)) }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: climate.sam
            data:
              hvac_mode: >
                {% set remote = states('sensor.t_h_sensor_temperature') | float %}
                {% set desired = states('input_number.sam_desired_temperature') | float %}
                {% set outdoor = states('sensor.sam_outside_temperature') | float %}
                {% set diff = remote - desired %}
                {{ 'fan_only' if (remote < desired - temp_tolerance and outdoor > desired) or diff > fan_only_diff else 'heat' }}
          - service: climate.set_temperature
            target:
              entity_id: climate.sam
            data:
              temperature: >
                {% set remote = states('sensor.t_h_sensor_temperature') | float %}
                {% set desired = states('input_number.sam_desired_temperature') | float %}
                {% set internal = states('sensor.sam_inside_temperature') | float %}
                {% set diff = remote - desired %}
                {% if remote < desired - temp_tolerance %}
                  {{ internal + heat_offset }}
                {% elif remote >= desired %}
                  {{ internal + [base_stop_heat_offset - diff, max_stop_heat_offset] | max }}
                {% else %}
                  {{ internal }}
                {% endif %}
              hvac_mode: >
                {% set remote = states('sensor.t_h_sensor_temperature') | float %}
                {% set desired = states('input_number.sam_desired_temperature') | float %}
                {% set outdoor = states('sensor.sam_outside_temperature') | float %}
                {% set diff = remote - desired %}
                {{ 'fan_only' if (remote < desired - temp_tolerance and outdoor > desired) or diff > fan_only_diff else 'heat' }}
          - service: logbook.log
            data:
              name: "Sam HVAC"
              message: >
                {% set remote = states('sensor.t_h_sensor_temperature') | float %}
                {% set desired = states('input_number.sam_desired_temperature') | float %}
                {% set outdoor = states('sensor.sam_outside_temperature') | float %}
                {% set internal = states('sensor.sam_inside_temperature') | float %}
                {% set diff = remote - desired %}
                {% set mode = 'fan_only' if (remote < desired - temp_tolerance and outdoor > desired) or diff > fan_only_diff else 'heat' %}
                {% set target = internal + heat_offset if remote < desired - temp_tolerance else (internal + [base_stop_heat_offset - diff, max_stop_heat_offset] | max if remote >= desired else internal) %}
                Set to {{ mode }}, target {{ target | round(1) }}°C:
                {% if mode == 'fan_only' %}
                  {% if remote < desired - temp_tolerance %}
                    remote {{ remote | round(1) }}°C too cold but outdoor {{ outdoor | round(1) }}°C > desired {{ desired | round(1) }}°C
                  {% else %}
                    remote {{ remote | round(1) }}°C too warm by {{ diff | round(1) }}°C > {{ fan_only_diff }}°C
                  {% endif %}
                {% elif remote < desired - temp_tolerance %}
                  remote {{ remote | round(1) }}°C too cold, internal {{ internal | round(1) }}°C
                {% elif remote >= desired %}
                  remote {{ remote | round(1) }}°C too warm or at desired by {{ diff | round(1) }}°C, internal {{ internal | round(1) }}°C
                {% else %}
                  remote {{ remote | round(1) }}°C within {{ temp_tolerance }}°C of desired {{ desired | round(1) }}°C, internal {{ internal | round(1) }}°C
                {% endif %}
          - service: input_text.set_value
            target:
              entity_id: input_text.sam_hvac_status
            data:
              value: >
                {% set remote = states('sensor.t_h_sensor_temperature') | float %}
                {% set desired = states('input_number.sam_desired_temperature') | float %}
                {% set outdoor = states('sensor.sam_outside_temperature') | float %}
                {% set internal = states('sensor.sam_inside_temperature') | float %}
                {% set diff = remote - desired %}
                {% set mode = 'fan_only' if (remote < desired - temp_tolerance and outdoor > desired) or diff > fan_only_diff else 'heat' %}
                {% set target = internal + heat_offset if remote < desired - temp_tolerance else (internal + [base_stop_heat_offset - diff, max_stop_heat_offset] | max if remote >= desired else internal) %}
                Set to {{ mode }}, target {{ target | round(1) }}°C:
                {% if mode == 'fan_only' %}
                  {% if remote < desired - temp_tolerance %}
                    remote {{ remote | round(1) }}°C too cold but outdoor {{ outdoor | round(1) }}°C > desired {{ desired | round(1) }}°C
                  {% else %}
                    remote {{ remote | round(1) }}°C too warm by {{ diff | round(1) }}°C > {{ fan_only_diff }}°C
                  {% endif %}
                {% elif remote < desired - temp_tolerance %}
                  remote {{ remote | round(1) }}°C too cold, internal {{ internal | round(1) }}°C
                {% elif remote >= desired %}
                  remote {{ remote | round(1) }}°C too warm or at desired by {{ diff | round(1) }}°C, internal {{ internal | round(1) }}°C
                {% else %}
                  remote {{ remote | round(1) }}°C within {{ temp_tolerance }}°C of desired {{ desired | round(1) }}°C, internal {{ internal | round(1) }}°C
                {% endif %}
    default: []
